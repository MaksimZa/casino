import operator
import nest_asyncio
nest_asyncio.apply()

import asyncio
import logging
import configparser
import os
import shutil
import string
import random
import time
import httpx
import locale  # –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ locale
import locale  # –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ locale
locale.setlocale(locale.LC_ALL, 'ru_RU.UTF-8')  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–æ–∫–∞–ª–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª
from datetime import datetime  
from uuid import uuid4

# Removed requests, csv, StringIO imports
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler, ConversationHandler
)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
        
# –§–∞–π–ª .ini –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞

ACCOUNTS_FILE = "accounts.ini"
REPORTS_FILE = "reports.ini"
WITHDRAWALS_FILE = "withdrawals.ini"
REGISTRATIONS_FILE = "registrations.ini"
admin_ids = [737010714]
REG_NAME, REG_REALNAME, REG_BIRTHDATE = range(3)

async def unknown_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ .ini-—Ñ–∞–π–ª–∞ (—Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–µ–π –¥–ª—è —Å–∏–º–≤–æ–ª–∞ '%')
def load_accounts():
    config = configparser.ConfigParser(interpolation=None)
    config.read(ACCOUNTS_FILE, encoding="utf-8")
    return config

def save_accounts(config):
    with open(ACCOUNTS_FILE, "w", encoding="utf-8") as configfile:
        config.write(configfile)
        
def load_reports():
    config = configparser.ConfigParser(interpolation=None)
    config.read(REPORTS_FILE, encoding="utf-8")
    return config

def load_withdrawals():
    config = configparser.ConfigParser(interpolation=None)
    config.read(WITHDRAWALS_FILE, encoding="utf-8")
    return config

def load_registrations():
    config = configparser.ConfigParser(interpolation=None)
    config.read(REGISTRATIONS_FILE, encoding="utf-8")
    return config

# –°–∏—Å—Ç–µ–º–∞ –ø–ª–∞–Ω–∞ (–ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
def get_top_players():
    config = load_accounts()
    players = []
    for section in config.sections():
        if section.isdigit():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                ball = int(config[section].get('ball', 0))
                nick = config[section].get('nick', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
                players.append((nick, ball))
            except ValueError:
                continue  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ ball –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
    top_players = sorted(players, key=operator.itemgetter(1), reverse=True)[:3]
    return top_players

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ ID –∏–∑ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ —Å–∏–º–≤–æ–ª–æ–≤ (–¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –æ—Ç—á—ë—Ç–æ–≤)
def generate_random_id(length=5):
    chars = string.ascii_letters + string.digits
    return ''.join(random.choice(chars) for _ in range(length))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–æ–≤ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é, –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query  # –ó–∞–≥–ª—É—à–∫–∞

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º)
TOKEN = '8108534662:AAGITJNoOW2VQotLETnJAuJjVoOkpX2VzHA'  # –ü–ï–†–ï–î –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞ –û–ë–ù–û–í–ò–¢–¨ —Ç–æ–∫–µ–Ω

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ Telegram ID –∏–∑ .ini-—Ñ–∞–π–ª–∞
def get_user_info(user_id):
    config = load_accounts()
    sec_name = str(user_id)
    if config.has_section(sec_name):
        sec = config[sec_name]
        rank = int(sec.get('rank', '-1'))  
        daily_rate = get_daily_rate(rank)  
        ball = int(sec.get('ball', '0')) if 'ball' in sec else 0
        warnings = int(sec.get('warnings', '0'))
        predicted_payment = calculate_predicted_payment(ball=ball, daily_rate=daily_rate, warnings=warnings)
        return {
            'nick': sec.get('nick', ''), 
            'position': sec.get('position', ''), 
            'rank': rank, 
            'daily_rate': daily_rate, 
            'warnings': sec.get('warnings', '0'), 
            'predicted_payment': predicted_payment, 
            'personal_account': sec.get('personal_account', '0'), 
            'rating': sec.get('rating', '0'), 
            'ball': ball, 
            'is_admin': sec.get('is_admin', '-1'),
            'realname': sec.get('realname', ''), 
            'daterod': sec.get('daterod', ''), 
        }
    return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑—Ä—è–¥–∞
def get_daily_rate(rank):
    rates = {
        -1: 0,  # –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–∞–∑—Ä—è–¥–∞
        0: 150000,
        1: 175000,
        2: 200000,
        3: 225000,
        4: 250000,
        5: 275000,
        6: 300000,
        7: 325000,
        8: 350000,
        9: 375000,
        10: 400000
    }
    return rates.get(rank, 0)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ predicted_payment
def calculate_predicted_payment(ball, daily_rate, warnings):
    reduction_factor = 1 - (0.25 * warnings)
    return ball * daily_rate * reduction_factor

def update_balls():
    config = load_accounts()
    updated = False
    for section in config.sections():
        if section.isdigit():  
            ball = int(config[section].get('ball', 0))
            
            if config[section].get('ball') != str(ball):
                config[section]['ball'] = str(ball)
                updated = True
                logging.info(f"Updated ball for user {section}: ball={ball}")
    
    if updated:
        save_accounts(config)
        logging.info("All updates saved to accounts.ini")
    else:
        logging.info("No updates needed")

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_keyboard():
    keyboard = [
        [KeyboardButton("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"), KeyboardButton("–†–µ–π—Ç–∏–Ω–≥")],
        [KeyboardButton("–û—Ç—á—ë—Ç"), KeyboardButton("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")],
        [KeyboardButton("–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤")],
        [KeyboardButton("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
def get_back_keyboard():
    keyboard = [[KeyboardButton("–ù–∞–∑–∞–¥")]]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ (/start)
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=get_login_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–æ–π—Ç–∏"
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è":
        await login(update, context)

# –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É (–ø–æ –Ω–∞–∂–∞—Ç–∏—é "–í–æ–π—Ç–∏" –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—é "–≤–æ–π—Ç–∏")
async def login(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_info = get_user_info(user_id)
    
    if not user_info:
        await update.message.reply_text("–í–∞—à Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞.")
        return
    
    admin_level = int(user_info.get('is_admin', 0))
    nick = user_info['nick']
    rank = user_info['rank']

    if admin_level == -1:
        await update.message.reply_text(
            f"üêª –†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ *{nick}*!\n"
            f"‚ö™ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ –ì–æ—Å—Ç—å. –î–ª—è –≤—ã–¥–∞—á–∏ –ø—Ä–∞–≤ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞.",
            parse_mode="Markdown"
        )
    if admin_level == 0:
        await update.message.reply_text(
            f"üêª –†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ *{nick}*!\n"
            f"üîµ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ –ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å *{rank}* —Ä–∞–∑—Ä—è–¥–∞.",
            parse_mode="Markdown"
        )
    elif admin_level == 1:
        await update.message.reply_text(
            f"üêª –†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ *{nick}*!\n"
            f"üü° –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ –ü–æ—á—ë—Ç–Ω—ã–π –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å.",
            parse_mode="Markdown"
        )
    elif admin_level == 2:
        await update.message.reply_text(
            f"üêª –†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ *{nick}*!\n"
            f"üü† –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ –°—Ç–∞—Ä—à–∏–π –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å.",
            parse_mode="Markdown"
        )
    elif admin_level == 3:
        await update.message.reply_text(
            f"üêª –†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ *{nick}*!\n"
            f"üî¥ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ –õ–∏–¥–µ—Ä —Å–µ–º—å–∏.",
            parse_mode="Markdown"
        )
    
    await update.message.reply_text("–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.", reply_markup=get_main_keyboard())


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—Ö–æ–¥–∞ (–∫–Ω–æ–ø–∫–∞ "–í–æ–π—Ç–∏")
def get_login_keyboard():
    keyboard = [
        [KeyboardButton("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"), KeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (/menu)
async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_info = get_user_info(user_id)
    admin_level = int(user_info.get('is_admin', 0)) if user_info else 0
    await update.message.reply_text(
        "–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.",
        reply_markup=get_main_keyboard()
    )

# –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç (–∫–æ–º–∞–Ω–¥–∞ "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def personal_account(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_info = get_user_info(user_id)
    if user_info:
        predicted_payment_formatted = locale.format_string("%d", user_info['predicted_payment'], grouping=True).replace('¬†', '.')
        daily_rate_formatted = locale.format_string("%d", user_info['daily_rate'], grouping=True).replace('¬†', '.')
        personal_account_formatted = locale.format_string("%d", int(user_info['personal_account']), grouping=True).replace('¬†', '.')
        message = (
            f"üìå –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n\n"
            f"üë§ –ù–∏–∫–Ω–µ–π–º: {user_info['nick']}\n"
            f"üîÆ –†–µ–∞–ª—å–Ω–æ–µ –∏–º—è: {user_info['realname']}\n"
            f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user_info['daterod']}\n"
            f"üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: {user_info['position']}\n"
            f"‚≠ê –†–∞–∑—Ä—è–¥: {user_info['rank']}\n"
            f"üí∞ –°—Ç–∞–≤–∫–∞ –≤ –¥–µ–Ω—å: {daily_rate_formatted} RUB\n"
            f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {user_info['warnings']}\n"
            f"‚ú¥Ô∏è –ë–∞–ª–ª—ã: {user_info['ball']}\n"
            f"üí∏ –ó–∞—Ä–ø–ª–∞—Ç–∞: {predicted_payment_formatted} RUB\n"
            f"üí≥ –õ–∏—á–Ω—ã–π —Å—á–µ—Ç: {personal_account_formatted} RUB" 
        )
        await update.message.reply_text(message, reply_markup=get_back_keyboard())
    else:
        await update.message.reply_text("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=get_back_keyboard())
        
# –†–µ–π—Ç–∏–Ω–≥ (–∫–æ–º–∞–Ω–¥–∞ "–†–µ–π—Ç–∏–Ω–≥")
async def rating(update: Update, context: ContextTypes.DEFAULT_TYPE):
    top_players = get_top_players()
    if not top_players:
        await update.message.reply_text("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ.", reply_markup=get_back_keyboard())
        return

    message = "üèÜ –†–µ–π—Ç–∏–Ω–≥ –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª–µ–π –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ —Ä–∞—Å—á—ë—Ç–Ω—É—é –Ω–µ–¥–µ–ª—é:\n\n"
    emojis = ["ü•á", "ü•à", "ü•â"]
    for i, (nick, ball) in enumerate(top_players):
        message += f"{emojis[i]} {nick}: {ball} –±–∞–ª–ª–æ–≤\n"
    
    message += "\n–ß—Ç–æ –ø–æ–ª—É—á–∞–µ—Ç –õ–∏–¥–µ—Ä ‚ùì\n"
    message += "üèÜ –ü–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –ø–æ–ª—É—á–∞–µ—Ç –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ –≤ —Ä–∞–∑—Ä—è–¥–µ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ 5 –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª–µ–π."

    await update.message.reply_text(message, reply_markup=get_back_keyboard())

# –ü–ª–∞–Ω —Ä–∞–±–æ—Ç (–∫–æ–º–∞–Ω–¥–∞ "–ü–ª–∞–Ω")
async def plan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    plan_text = (
        "1Ô∏è‚É£ –ë–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ ‚Äî —ç—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –≤—ã–ø–ª–∞—Ç –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã –∑–∞ —Ä–∞—Å—á—ë—Ç–Ω—É—é –Ω–µ–¥–µ–ª—é.\n"
        "2Ô∏è‚É£ –ë–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –∑–∞ –ª—é–±—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–æ–≥–ª–∞—Å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Å–∏—Å—Ç–µ–º–∞–º.\n"
        "3Ô∏è‚É£ –í—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª–∞–¥–∞ –∫–∞–∂–¥–æ–≥–æ —á–ª–µ–Ω–∞ —Å—Ç–∞—Ä—à–µ–≥–æ —Å–æ—Å—Ç–∞–≤–∞.\n"
        "4Ô∏è‚É£ –î–µ–π—Å—Ç–≤—É–µ—Ç —Ä–∞–∑—Ä—è–¥–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏ –ø–æ–æ—â—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã.\n"
        "5Ô∏è‚É£ –î–ª—è –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª–µ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–æ—Ä–º—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –Ω–µ–¥–µ–ª—é.\n"
        "6Ô∏è‚É£ –í —Å–ª—É—á–∞–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –Ω–æ—Ä–º –æ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–Ω–∏–∂–µ–Ω—ã –∏–ª–∏ —Å–Ω—è—Ç—ã.\n\n"
        "üèÜ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.\n"
        "üî¥ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ‚Äì –æ—Ç 200 –¥–æ 299 –±–∞–ª–ª–æ–≤ –≤ –Ω–µ–¥–µ–ª—é.\n"
        "üü¢ –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ‚Äì –æ—Ç 300 –¥–æ 399 –±–∞–ª–ª–æ–≤ –≤ –Ω–µ–¥–µ–ª—é.\n"
        "üü° –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ‚Äì –æ—Ç 400 –±–∞–ª–ª–æ–≤ –≤ –Ω–µ–¥–µ–ª—é.\n\n"
        "üéÅ –ë–æ–Ω—É—Å—ã.\n"
        "üü¢ –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ‚Äì 50 –±–∞–ª–ª–æ–≤ –∏ —Å—Ä–µ–¥–Ω–∏–π —à–∞–Ω—Å –ø–æ–≤—ã—à–µ–Ω–∏—è.\n"
        "üü° –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ‚Äì 100 –±–∞–ª–ª–æ–≤ –∏ –≤—ã—Å–æ–∫–∏–π —à–∞–Ω—Å –ø–æ–≤—ã—à–µ–Ω–∏—è."
    )
    await update.message.reply_text(f"‚ÑπÔ∏è FAQ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.\n\n{plan_text}", reply_markup=get_back_keyboard())

# –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∫–æ–º–∞–Ω–¥–∞ "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
# –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∫–æ–º–∞–Ω–¥–∞ "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
async def admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_info = get_user_info(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not user_info or int(user_info['is_admin']) == 0:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.")
        return

    admin_level = int(user_info.get('is_admin', 0))

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard = []

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å —É—Ä–æ–≤–Ω–µ–º 1 –∏ –≤—ã—à–µ
    if admin_level >= 1:
        keyboard.append([InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="manage_users")])
        
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å —É—Ä–æ–≤–Ω–µ–º 2 –∏ –≤—ã—à–µ
    if admin_level >= 2:
        keyboard.append([InlineKeyboardButton("üìä –û—Ç—á–µ—Ç—ã", callback_data="reports")])
        keyboard.append([InlineKeyboardButton("üì¢ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", callback_data="mass_message")])
        keyboard.append([InlineKeyboardButton("‚úâ –û–¥–∏–Ω–æ—á–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", callback_data="start_single_message")])
        keyboard.append([InlineKeyboardButton("üìã –ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", callback_data="view_registrations")])

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å —É—Ä–æ–≤–Ω–µ–º 3
    if admin_level >= 3:
        keyboard.append([InlineKeyboardButton("üí∞ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥", callback_data="admin_withdrawals")])

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("‚úÖ –í—ã –≤–æ—à–ª–∏ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=reply_markup)

# –ö–æ–º–∞–Ω–¥–∞ "–û—Ç—á—ë—Ç" (–ø–æ–¥–∞—á–∞ –Ω–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ)
async def report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    try:
        config = load_reports()
    except Exception as e:
        logging.error(f"Error loading report data for user {user_id}: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤.", reply_markup=get_back_keyboard())
        return

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏
    pending_reports = []
    for sec in config.sections():
        if sec.startswith("report_") and config[sec].get("user_id") == str(user_id) and config[sec].get("status", "pending") == "pending":
            pending_reports.append(sec)

    if pending_reports:
        reports_message = "üìã –í–∞—à–∏ –æ—Ç—á–µ—Ç—ã –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏:\n\n"
        for report_id in pending_reports:
            reports_message += f"‚è≥ –û—Ç—á–µ—Ç ID: {report_id[len('report_'):]}\n"
        await update.message.reply_text(reports_message, reply_markup=get_back_keyboard())

    # –ü–æ–∑–≤–æ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç
    context.user_data['report_state'] = 'await_text'
    logging.info(f"User {user_id} is creating a new report.")
    await update.message.reply_text(
        "‚úèÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –æ—Ç—á–µ—Ç–∞.",
        reply_markup=get_back_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é (–æ–±—â–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é)
async def handle_menu_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_info = get_user_info(user_id)
    admin_level = int(user_info.get('is_admin', 0)) if user_info else 0
    
    if admin_level == -1:
        await update.message.reply_text("–î–ª—è –≤—ã–¥–∞—á–∏ –ø—Ä–∞–≤ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞.")
        return

    try:
        text = update.message.text.strip()
        logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã: {text}")
        if text == "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç":
            await personal_account(update, context)
        elif text == "–û—Ç—á—ë—Ç":
            await report(update, context)
        elif text == "–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤":
            await request_withdrawal(update, context)
        elif text == "–†–µ–π—Ç–∏–Ω–≥":
            await rating(update, context)
        elif text == "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å":
            await plan(update, context)
        elif text == "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞":
            await admin(update, context)
        elif text == "–ù–∞–∑–∞–¥":
            await menu(update, context)
        else:
            logging.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {text}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–Ω—é: {e}")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –≤ .ini-—Ñ–∞–π–ª
async def save_request(request_id: str, nick: str, amount: float, remaining_balance: float, user_id: int, context: ContextTypes.DEFAULT_TYPE):
    config = load_withdrawals()
    config[f"request_{request_id}"] = {
        "nick": nick,
        "amount": str(amount),
        "remaining_balance": str(remaining_balance),
        "user_id": str(user_id),
        "status": "pending"
    }
    with open(WITHDRAWALS_FILE, "w", encoding="utf-8") as configfile:
        config.write(configfile)

# –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –∏–∑ .ini-—Ñ–∞–π–ª–∞
def remove_request(request_id: str):
    config = load_withdrawals()
    sec_name = f"request_{request_id}"
    if config.has_section(sec_name):
        config.remove_section(sec_name)
        with open(WITHDRAWALS_FILE, "w", encoding="utf-8") as configfile:
            config.write(configfile)

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤" (–∏–Ω–∏—Ü–∏–∞—Ü–∏—è –∑–∞—è–≤–∫–∏)
async def request_withdrawal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_info = get_user_info(user_id)
    if not user_info:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    balance = float(user_info['personal_account'])
    if balance <= 0:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞.")
        return
    amounts = {
        25: round(balance * 0.25, 2),
        50: round(balance * 0.50, 2),
        75: round(balance * 0.75, 2),
        100: round(balance * 1.00, 2),
    }
    keyboard = [
        [InlineKeyboardButton(f"–í—ã–≤–µ—Å—Ç–∏ 25% ({amounts[25]})", callback_data="withdraw_25")],
        [InlineKeyboardButton(f"–í—ã–≤–µ—Å—Ç–∏ 50% ({amounts[50]})", callback_data="withdraw_50")],
        [InlineKeyboardButton(f"–í—ã–≤–µ—Å—Ç–∏ 75% ({amounts[75]})", callback_data="withdraw_75")],
        [InlineKeyboardButton(f"–í—ã–≤–µ—Å—Ç–∏ 100% ({amounts[100]})", callback_data="withdraw_100")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –≤—ã–≤–æ–¥–∞ (–ø–æ—Å–ª–µ –∫–Ω–æ–ø–æ–∫ 25%, 50%, 75%, 100%)
async def handle_withdrawal_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    user_info = get_user_info(user_id)
    if not user_info:
        await query.message.edit_text("–û—à–∏–±–∫–∞: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    balance = float(user_info['personal_account'])
    percentage = int(query.data.split("_")[1])
    amount = round(balance * (percentage / 100), 2)
    if amount <= 0:
        await query.message.edit_text("–û—à–∏–±–∫–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞.")
        return
    remaining_balance = round(balance - amount, 2)
    request_id = str(uuid4())[:8]
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
    context.user_data[user_id] = {
        "request_id": request_id,
        "amount": amount,
        "remaining_balance": remaining_balance,
        "nick": user_info['nick']
    }
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm_withdraw")],
        [InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_withdraw")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    message = (
        f"üîî –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥\n\n"
        f"üë§ –ù–∏–∫: {user_info['nick']}\n"
        f"üí∏ –°—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {amount} RUB\n"
        f"üí≥ –û—Å—Ç–∞—Ç–æ–∫ –ø–æ—Å–ª–µ –≤—ã–≤–æ–¥–∞: {remaining_balance}\n\n"
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —É–∫–∞–∑–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ. –ù–∞–∂–º–∏—Ç–µ '–î–∞', –µ—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, –∏–ª–∏ '–ù–µ—Ç' –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ .ini-—Ñ–∞–π–ª —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "pending"
    await save_request(request_id, user_info['nick'], amount, remaining_balance, user_id, context)
    await query.message.edit_text(message, reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ ("–î–∞")
async def confirm_withdraw_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    if user_id not in context.user_data or "request_id" not in context.user_data[user_id]:
        await query.message.edit_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    req = context.user_data[user_id]
    request_id = req["request_id"]
    amount = req["amount"]
    remaining_balance = req["remaining_balance"]
    nick = req["nick"]
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
    await notify_admin_about_new_request(nick, amount, request_id, context)
    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ
    await query.message.edit_text("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏ ("–ù–µ—Ç")
async def cancel_withdraw_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    if user_id in context.user_data and "request_id" in context.user_data[user_id]:
        req_id = context.user_data[user_id]["request_id"]
        remove_request(req_id)
        context.user_data.pop(user_id, None)
    await query.message.edit_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è "–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥" –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ ‚Äì —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫
async def admin_withdrawals(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    config = load_withdrawals()
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "pending"
    requests = [sec for sec in config.sections() if sec.startswith("request_") and config[sec].get("status", "pending") == "pending"]
    if not requests:
        await query.message.edit_text("üìã –ù–µ—Ç –∑–∞—è–≤–æ–∫, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        return
    text = "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥:\n"
    keyboard = []
    for sec in requests:
        nick = config[sec].get("nick", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        amount = config[sec].get("amount", "0")
        text += f"\nüîπ {nick} ‚Äî {amount} RUB"
        req_id = sec[len("request_"):]
        keyboard.append([InlineKeyboardButton(f"ID –∑–∞—è–≤–∫–∏: {req_id}", callback_data=f"view_{req_id}")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.edit_text(text, reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞—è–≤–∫—É (ID) ‚Äì –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏
async def view_withdrawal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    request_id = query.data.split("_")[1]
    config = load_withdrawals()
    sec_name = f"request_{request_id}"
    if not config.has_section(sec_name):
        await query.message.edit_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    user_id = int(config[sec_name]["user_id"])
    amount = config[sec_name]["amount"]
    nick = config[sec_name]["nick"]
    text = f"–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {amount} RUB –¥–ª—è {nick}\nID –∑–∞—è–≤–∫–∏: {request_id}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_{request_id}")],
        [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{request_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.edit_text(text, reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ (–∞–¥–º–∏–Ω –Ω–∞–∂–∞–ª "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
async def approve_withdrawal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    request_id = query.data.split("_")[1]
    config = load_withdrawals()
    sec_name = f"request_{request_id}"
    if not config.has_section(sec_name):
        await query.message.edit_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    user_id = int(config[sec_name]["user_id"])
    amount = config[sec_name]["amount"]
    nick = config[sec_name]["nick"]
    # –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É –∏–∑ —Ñ–∞–π–ª–∞
    config.remove_section(sec_name)
    with open(WITHDRAWALS_FILE, "w", encoding="utf-8") as f:
        config.write(f)
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏
    await context.bot.send_message(user_id, f"‚úÖ –í–∞—à –≤—ã–≤–æ–¥ {amount} RUB –æ–¥–æ–±—Ä–µ–Ω, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ç–µ–º—É - –±—é–¥–∂–µ—Ç —Å–µ–º—å–∏!")
    await query.message.edit_text(f"‚úÖ –í—ã–≤–æ–¥ {amount} RUB –¥–ª—è {nick} –æ–¥–æ–±—Ä–µ–Ω!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ ("–û—Ç–∫–ª–æ–Ω–∏—Ç—å")
async def reject_withdrawal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    request_id = query.data.split("_")[1]
    config = load_withdrawals()
    sec_name = f"request_{request_id}"
    if not config.has_section(sec_name):
        await query.message.edit_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    user_id = int(config[sec_name]["user_id"])
    amount = config[sec_name]["amount"]
    nick = config[sec_name]["nick"]
    # –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É –∏–∑ —Ñ–∞–π–ª–∞
    config.remove_section(sec_name)
    with open(WITHDRAWALS_FILE, "w", encoding="utf-8") as f:
        config.write(f)
    # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    print(f"–ó–∞—è–≤–∫–∞ {request_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏ —É–¥–∞–ª–µ–Ω–∞.")
    try:
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
        await context.bot.send_message(user_id, f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {amount} RUB –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏–π.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        await query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        return
    await query.message.edit_text(f"‚ùå –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {amount} RUB –¥–ª—è {nick} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ –Ω–∞ –≤—ã–≤–æ–¥
async def notify_admin_about_new_request(nick: str, amount: float, request_id: str, context: ContextTypes.DEFAULT_TYPE):
    if not admin_ids:
        return
    admin_id = admin_ids[0]
    message = (
        f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {nick}\n"
        f"üí∏ –°—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {amount} RUB\n"
        f"üÜî ID –∑–∞—è–≤–∫–∏: {request_id}\n\n"
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞—è–≤–∫—É –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–ª—è –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è."
    )
    try:
        await context.bot.send_message(admin_id, message)
        print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

# –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ (–∏–Ω–∏—Ü–∏–∞—Ü–∏—è)
async def mass_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    message_text = "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:"
    keyboard = [[InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_mass_message")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(message_text, reply_markup=reply_markup)
    context.user_data['mass_message'] = True

# –û—Ç–º–µ–Ω–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
async def cancel_mass_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if 'mass_message' in context.user_data:
        del context.user_data['mass_message']
    await query.message.edit_text("‚ùå –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

# –û–¥–∏–Ω–æ—á–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ (–∏–Ω–∏—Ü–∏–∞—Ü–∏—è)
async def single_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    config = load_accounts()
    # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (ID –∏ –Ω–∏–∫–Ω–µ–π–º)
    users = [(sec, config[sec].get("nick", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")) for sec in config.sections() if sec.isdigit()]
    if not users:
        await query.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.")
        return
    buttons = []
    for user_id, user_name in users:
        buttons.append([InlineKeyboardButton(user_name, callback_data=f"single_user_{user_id}")])
    reply_markup = InlineKeyboardMarkup(buttons)
    await query.message.reply_text("üë§ *–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:*", reply_markup=reply_markup, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
async def send_single_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = int(query.data.split("_")[2])
    context.user_data['single_message_user'] = user_id
    cancel_button = InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_single_message")
    reply_markup = InlineKeyboardMarkup([[cancel_button]])
    await query.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:", reply_markup=reply_markup)

# –û—Ç–º–µ–Ω–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
async def cancel_single_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if 'single_message_user' in context.user_data:
        del context.user_data['single_message_user']
    await query.message.reply_text("‚ùå –û–¥–∏–Ω–æ—á–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: —Å–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏
async def admin_reports(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    config = load_reports()
    reports = [sec for sec in config.sections() if sec.startswith("report_") and config[sec].get("status", "pending") == "pending"]
    if not reports:
        await query.message.edit_text("üìã –ù–µ—Ç –æ—Ç—á–µ—Ç–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        return
    text = "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã:\n"
    keyboard = []
    for sec in reports:
        nick = config[sec].get("nick", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        rid = sec[len("report_"):]
        text += f"\nüîπ –û—Ç—á–µ—Ç –æ—Ç {nick} (ID: {rid})"
        keyboard.append([InlineKeyboardButton(f"ID –æ—Ç—á–µ—Ç–∞: {rid}", callback_data=f"viewReport_{rid}")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.edit_text(text, reply_markup=reply_markup)

# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ (–Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å ID –æ—Ç—á–µ—Ç–∞)
async def view_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    report_id = query.data[len("viewReport_"):]
    config = load_reports()
    sec_name = f"report_{report_id}"
    if not config.has_section(sec_name):
        await query.message.edit_text("‚ùå –û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
        return
    sec = config[sec_name]
    user_id = int(sec.get("user_id", 0))
    nick = sec.get("nick", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
    date = sec.get("date", "")
    folder = f"reports/{report_id}"
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞
    report_text = ""
    try:
        with open(os.path.join(folder, "text.txt"), "r", encoding="utf-8") as f:
            report_text = f.read()
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞ {report_id}: {e}")
        report_text = "[–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –æ—Ç—á–µ—Ç–∞]"
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –æ—Ç—á–µ—Ç–æ–≤ (–¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞)
    try:
        await query.message.delete()
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç—á–µ—Ç–æ–≤: {e}")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–µ—Ç–∞–ª–∏ –æ—Ç—á–µ—Ç–∞
    detail_text = f"–û—Ç—á—ë—Ç {report_id} –æ—Ç {nick} (–¥–∞—Ç–∞: {date}):\n\n{report_text}"
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approveReport_{report_id}")],
        [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"rejectReport_{report_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    admin_chat_id = update.effective_chat.id
    await context.bot.send_message(admin_chat_id, detail_text, reply_markup=reply_markup)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç—á–µ—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if os.path.isdir(folder):
        files = sorted([f for f in os.listdir(folder) if f.startswith("photo")])
        for fname in files:
            if fname.startswith("photo"):
                try:
                    with open(os.path.join(folder, fname), "rb") as img:
                        await context.bot.send_photo(admin_chat_id, photo=img)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ {fname} –æ—Ç—á–µ—Ç–∞ {report_id}: {e}")

# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç—á–µ—Ç
async def approve_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    report_id = query.data[len("approveReport_"):]
    try:
        config = load_reports()
        sec_name = f"report_{report_id}"
        if not config.has_section(sec_name):
            await query.message.edit_text("‚ùå –û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        nick = config[sec_name].get("nick", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        user_id = int(config[sec_name].get("user_id", 0)) if config[sec_name].get("user_id") else 0

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç—á–µ—Ç–∞ –Ω–∞ "approved"
        config[sec_name]["status"] = "approved"
        with open(REPORTS_FILE, "w", encoding="utf-8") as f:
            config.write(f)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–Ω—è—Ç—ã—Ö —á–µ–ª–æ–≤–µ–∫
        context.user_data['approve_report_id'] = report_id
        context.user_data['approve_user_id'] = user_id
        await query.message.edit_text(
            f"üïì –û—Ç—á—ë—Ç ID {report_id} –æ—Ç {nick} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω —á–∞—Å—Ç–∏—á–Ω–æ.\n\n"
            "‚Äº –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—é:"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ {report_id}: {e}")
        await query.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç—á–µ—Ç.")

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–Ω—è—Ç—ã—Ö —á–µ–ª–æ–≤–µ–∫
async def handle_personnel_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–º –æ—Ç—á–µ—Ç–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        report_id = context.user_data.get('approve_report_id')
        user_id = context.user_data.get('approve_user_id')
        nick = context.user_data.get('approve_report_nick')

        if report_id and user_id:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∏—Å–ª–æ
            personnel_count = int(update.message.text.strip())

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ball
            config = load_accounts()
            admin_id = update.effective_user.id

            if config.has_section(str(admin_id)):
                admin_ball = int(config[str(admin_id)].get('ball', '0'))
                config[str(admin_id)]['ball'] = str(admin_ball + 3) #–≤—ã–¥–∞–µ–º 3 –±–∞–ª–ª–∞ –∞–¥–º–∏–Ω–∫—É –∑–∞ –ø—Ä–∏–Ω—è—Ç—ã–π –æ—Ç—á—ë—Ç

            if config.has_section(str(user_id)):
                user_ball = int(config[str(user_id)].get('ball', '0'))
                config[str(user_id)]['ball'] = str(user_ball + personnel_count)

            with open(ACCOUNTS_FILE, "w", encoding="utf-8") as f:
                config.write(f)

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤
            try:
                await context.bot.send_message(user_id, f"‚úÖ –í–∞—à –æ—Ç—á—ë—Ç (ID {report_id}) –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {personnel_count} –±–∞–ª–ª–æ–≤.")
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ {report_id}: {e}")

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            await update.message.reply_text("‚úÖ –û—Ç—á—ë—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–Ω—è—Ç—ã—Ö —á–µ–ª–æ–≤–µ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –±–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã.")
            update_balls()
            context.user_data.pop('approve_report_id', None)
            context.user_data.pop('approve_user_id', None)
            context.user_data.pop('approve_report_nick', None)
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–º –æ—Ç—á–µ—Ç–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await handle_menu_selection(update, context)
    except ValueError:
        if report_id and user_id:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        else:
            await handle_menu_selection(update, context)
    except telegram.error.TimedOut:
        logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–Ω—è—Ç—ã—Ö —á–µ–ª–æ–≤–µ–∫: Timed out")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –∑–∞–ø—Ä–æ—Å –∫ Telegram API –∏—Å—Ç–µ–∫.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–Ω—è—Ç—ã—Ö —á–µ–ª–æ–≤–µ–∫: {e}")
        if report_id and user_id:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞.")
        else:
            await handle_menu_selection(update, context)

# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –æ—Ç—á–µ—Ç (–∑–∞–ø—Ä–æ—Å –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è)
async def reject_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    report_id = query.data[len("rejectReport_"):]
    try:
        config = load_reports()
        sec_name = f"report_{report_id}"
        if not config.has_section(sec_name):
            await query.message.edit_text("‚ùå –û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        await query.message.edit_reply_markup(reply_markup=None)
        context.user_data['reject_report_id'] = report_id
        await query.message.reply_text(f"‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ ID {report_id}.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ {report_id}: {e}")
        await query.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –æ—Ç—á–µ—Ç.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–∫–ª—é—á–∞—è —ç—Ç–∞–ø—ã —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –∏ —Ä–∞—Å—Å—ã–ª–æ–∫)
async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_text = update.message.text.strip()

    # Delegate to handle_personnel_input if we are in the process of approving a report
    if context.user_data.get('approve_report_id') and context.user_data.get('approve_user_id'):
        await handle_personnel_input(update, context)
        return

    # Existing logic for handling other text messages
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç—á–µ—Ç–∞ –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    if message_text == "–ù–∞–∑–∞–¥" and context.user_data.get('report_state'):
        report_id = context.user_data.get('current_report_id')
        if report_id and os.path.isdir(f"reports/{report_id}"):
            try:
                shutil.rmtree(f"reports/{report_id}")
                logging.info(f"–û—Ç—á–µ—Ç {report_id} –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –ø–∞–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞.")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–ø–∫–∏ –æ—Ç—á–µ—Ç–∞ {report_id} –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ: {e}")
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        context.user_data.pop('report_state', None)
        context.user_data.pop('current_report_id', None)
        context.user_data.pop('report_text', None)
        context.user_data.pop('photo_count', None)
        context.user_data.pop('saved_photos', None)
        await update.message.reply_text("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
        await menu(update, context)
        return

    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤–≤–æ–¥–∏—Ç –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞
    if context.user_data.get('reject_report_id'):
        report_id = context.user_data['reject_report_id']
        reason = message_text
        try:
            config = load_reports()
            sec_name = f"report_{report_id}"
            if not config.has_section(sec_name):
                await update.message.reply_text("‚ùå –û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            else:
                user_id = int(config[sec_name].get("user_id", 0))
                nick = config[sec_name].get("nick", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
                # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –æ—Ç—á–µ—Ç–∞ (–ø–∞–ø–∫—É —Å —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç–æ–º)
                folder = f"reports/{report_id}"
                if os.path.isdir(folder):
                    try:
                        shutil.rmtree(folder)
                        logging.info(f"–ü–∞–ø–∫–∞ –æ—Ç—á–µ—Ç–∞ {report_id} —É–¥–∞–ª–µ–Ω–∞.")
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–ø–∫–∏ –æ—Ç—á–µ—Ç–∞ {report_id}: {e}")
                # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ–± –æ—Ç—á–µ—Ç–µ –∏–∑ .ini-—Ñ–∞–π–ª–∞
                config.remove_section(sec_name)
                with open(REPORTS_FILE, "w", encoding="utf-8") as f:
                    config.write(f)
                logging.info(f"–û—Ç—á–µ—Ç {report_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏ —É–¥–∞–ª–µ–Ω.")
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∏ –ø—Ä–∏—á–∏–Ω–µ
                try:
                    await context.bot.send_message(user_id, f"‚ùå –í–∞—à –æ—Ç—á—ë—Ç (ID {report_id}) –æ—Ç–∫–ª–æ–Ω—ë–Ω. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è –æ—Ç—á–µ—Ç–∞ {report_id}: {e}")
                    await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
                else:
                    await update.message.reply_text(f"‚ùå –û—Ç—á—ë—Ç ID {report_id} –æ—Ç–∫–ª–æ–Ω—ë–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω. –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω 1 –±–∞–ª–ª –∑–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –æ—Ç—á—ë—Ç–∞.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ {report_id}: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞.")
        finally:
            context.user_data.pop('reject_report_id', None)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç—á–µ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—ç—Ç–∞–ø –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –æ—Ç—á–µ—Ç–∞)
    if context.user_data.get('report_state') == 'await_text':
        report_text = message_text
        report_id = generate_random_id()
        config = load_reports()
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ñ–∞–π–ª–µ
        while config.has_section(f"report_{report_id}"):
            report_id = generate_random_id()
        try:
            os.makedirs("reports", exist_ok=True)
            folder = f"reports/{report_id}"
            os.makedirs(folder, exist_ok=True)
            with open(os.path.join(folder, "text.txt"), "w", encoding="utf-8") as f:
                f.write(report_text)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –æ—Ç—á–µ—Ç–∞: {e}")
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            context.user_data.pop('report_state', None)
            return
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç—Ç–∞–ø—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        context.user_data['current_report_id'] = report_id
        context.user_data['report_text'] = report_text
        context.user_data['photo_count'] = 0
        context.user_data['saved_photos'] = []
        context.user_data['report_state'] = 'await_photos'
        await update.message.reply_text(
            "üì∑ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –æ—Ç—á–µ—Ç–∞. "
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–æ –æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /done. "
            "–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /done —Å—Ä–∞–∑—É."
        )
        return

    # –ï—Å–ª–∏ –æ–∂–∏–¥–∞—é—Ç—Å—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Ç–µ–∫—Å—Ç ‚Äì –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º –∫–æ–º–∞–Ω–¥—É /done
    if context.user_data.get('report_state') == 'await_photos':
        await update.message.reply_text(
            "üì∑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /done, –µ—Å–ª–∏ –±–æ–ª—å—à–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–µ—Ç."
        )
        return

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç "–≤–æ–π—Ç–∏" –≤—Ä—É—á–Ω—É—é (–¥—É–±–ª–∏—Ä—É–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏)
    if message_text.lower() == "–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è":
        await login(update, context)
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
    if 'mass_message' in context.user_data:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
        config = load_accounts()
        user_sections = [sec for sec in config.sections() if sec.isdigit()]
        successes = 0
        for sec in user_sections:
            try:
                await context.bot.send_message(chat_id=int(sec), text=message_text)
                successes += 1
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {sec}: {e}")
        await update.message.reply_text(f"–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {successes} —Å–æ–æ–±—â–µ–Ω–∏–π.")
        context.user_data.pop('mass_message', None)
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–æ–¥–∏–Ω–æ—á–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞)
    if 'single_message_user' in context.user_data:
        user_id = context.user_data['single_message_user']
        try:
            await context.bot.send_message(chat_id=user_id, text=message_text)
            await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        context.user_data.pop('single_message_user', None)
        return
    
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if 'handle_change_param' in context.user_data:
        user_id = context.user_data.get('user_id')
        param = context.user_data.get('change_param')
        if not user_id or not param:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
            return

        value = update.message.text.strip()
        config = load_accounts()
        if config.has_section(user_id):
            config[user_id][param] = value
            save_accounts(config)
            await update.message.reply_text(f"–ó–Ω–∞—á–µ–Ω–∏–µ {param} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {value}.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="edit_user")]]))
        else:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="edit_user")]]))
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∏–∫–∞
    if context.user_data.get('handle_change_nick'):
        user_id = context.user_data.get('user_id')
        new_nick = message_text
        config = load_accounts()
        if config.has_section(user_id):
            config[user_id]['nick'] = new_nick
            save_accounts(config)
            await update.message.reply_text(f"–ù–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_nick}.",
                                            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"edit_user_{user_id}")]]))
        else:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                                            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"edit_user_{user_id}")]]))
        context.user_data.pop('handle_change_nick', None)
        context.user_data.pop('user_id', None)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è Ball
    if context.user_data.get('handle_change_ball'):
        user_id = context.user_data.get('user_id')
        try:
            new_ball = int(message_text)
        except ValueError:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–ª—è –±–∞–ª–ª–æ–≤.")
            return
        config = load_accounts()
        if config.has_section(user_id):
            old_ball = int(config[user_id].get('ball', '0'))
            difference = new_ball - old_ball
            config[user_id]['ball'] = str(new_ball)
            save_accounts(config)
            await update.message.reply_text(f"–ë–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_ball}.",
                                            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"edit_user_{user_id}")]]))
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if difference > 0:
                await context.bot.send_message(chat_id=int(user_id), text=f"‚ú¥ –í–∞–º –∑–∞—á–∏—Å–ª–µ–Ω–æ {difference} –±–∞–ª–ª–æ–≤ –∏ —Ç–µ–ø–µ—Ä—å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ {new_ball}.")
            else:
                await context.bot.send_message(chat_id=int(user_id), text=f"‚ú¥ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–º–µ–Ω—å—à–∏–ª –í–∞–º –±–∞–ª–ª—ã –Ω–∞ {abs(difference)} –∏ —Ç–µ–ø–µ—Ä—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {new_ball}.")
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            for admin_id in admin_ids:
                if difference > 0:
                    await context.bot.send_message(chat_id=int(admin_id), text=f"‚úÖ‚ú¥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} —É–≤–µ–ª–∏—á–µ–Ω—ã –±–∞–ª–ª—ã –Ω–∞ {difference} –∏ —Ç–µ–ø–µ—Ä—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {new_ball}.")
                else:
                    await context.bot.send_message(chat_id=int(admin_id), text=f"‚úÖ‚ú¥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} —É–º–µ–Ω—å—à–µ–Ω—ã –±–∞–ª–ª—ã –Ω–∞ {abs(difference)} –∏ —Ç–µ–ø–µ—Ä—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {new_ball}.")
        else:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                                            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"edit_user_{user_id}")]]))
        context.user_data.pop('handle_change_ball', None)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–∏—á–Ω–æ–≥–æ —Å—á–µ—Ç–∞
    if context.user_data.get('handle_change_personal_account'):
        user_id = context.user_data.get('user_id')
        try:
            new_account = int(message_text)
        except ValueError:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ —Å—á–µ—Ç–∞.")
            return
        config = load_accounts()
        if config.has_section(user_id):
            config[user_id]['personal_account'] = str(new_account)
            save_accounts(config)
            await update.message.reply_text(f"–õ–∏—á–Ω—ã–π —Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_account}.",
                                            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"edit_user_{user_id}")]]))
        else:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                                            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"edit_user_{user_id}")]]))
        context.user_data.pop('handle_change_personal_account', None)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑—Ä—è–¥–∞
    if context.user_data.get('handle_change_rank'):
        user_id = context.user_data.get('user_id')
        try:
            new_rank = int(message_text)
        except ValueError:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ä–∞–∑—Ä—è–¥–∞.")
            return
        config = load_accounts()
        if config.has_section(user_id):
            config[user_id]['rank'] = str(new_rank)
            config[user_id]['daily_rate'] = str(get_daily_rate(new_rank))
            save_accounts(config)
            await update.message.reply_text(f"–†–∞–∑—Ä—è–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_rank}.",
                                            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"edit_user_{user_id}")]]))
        else:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                                            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"edit_user_{user_id}")]]))
        context.user_data.pop('handle_change_rank', None)
        return
    
    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ –∏–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ ‚Äì –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –∫–æ–º–∞–Ω–¥—É –º–µ–Ω—é
    await handle_menu_selection(update, context)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤–æ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('report_state') != 'await_photos':
        return
    report_id = context.user_data.get('current_report_id')
    photo_count = context.user_data.get('photo_count', 0)
    if photo_count >= 10:
        await update.message.reply_text("–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞.")
        return
    try:
        file_id = update.message.photo[-1].file_id
        file = await context.bot.get_file(file_id)
        folder = f"reports/{report_id}"
        os.makedirs(folder, exist_ok=True)
        photo_count += 1
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        ext = ""
        if file.file_path:
            ext = os.path.splitext(file.file_path)[1]
            if not ext:
                ext = ".jpg"
        else:
            ext = ".jpg"
        filename = f"photo{photo_count:02d}{ext}"
        path = os.path.join(folder, filename)
        await file.download_to_drive(path)
        context.user_data['photo_count'] = photo_count
        saved_photos = context.user_data.get('saved_photos', [])
        saved_photos.append(filename)
        context.user_data['saved_photos'] = saved_photos
        logging.info(f"–§–æ—Ç–æ {filename} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –æ—Ç—á–µ—Ç–∞ {report_id}.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ –¥–ª—è –æ—Ç—á–µ—Ç–∞: {e}")
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ—Ç—á—ë—Ç –∫–æ–º–∞–Ω–¥–æ–π /cancel.")
        return
    if context.user_data['photo_count'] == 10:
        await update.message.reply_text("‚úÖ –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ (10). –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞.")

# –ö–æ–º–∞–Ω–¥–∞ /done ‚Äì –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ (–ø–æ—Å–ª–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π)
async def finish_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('report_state') != 'await_photos':
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
        return
    report_id = context.user_data.get('current_report_id')
    report_text = context.user_data.get('report_text', '')
    user_id = update.effective_user.id
    user_info = get_user_info(user_id)
    nick = user_info['nick'] if user_info else (update.effective_user.username or update.effective_user.first_name or "")
    date_str = time.strftime("%Y-%m-%d %H:%M:%S")
    try:
        config = load_reports()
        config[f"report_{report_id}"] = {
            "user_id": str(user_id),
            "nick": nick,
            "date": date_str,
            "status": "pending"
        }
        with open(REPORTS_FILE, "w", encoding="utf-8") as f:
            config.write(f)
        logging.info(f"–û—Ç—á–µ—Ç {report_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ {report_id} –≤ —Ñ–∞–π–ª: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        # –ï—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å, —É–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É –æ—Ç—á–µ—Ç–∞
        folder = f"reports/{report_id}"
        if os.path.isdir(folder):
            try:
                shutil.rmtree(folder)
                logging.info(f"–£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞ –æ—Ç—á–µ—Ç–∞ {report_id} –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
            except Exception as e2:
                logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏ –æ—Ç—á–µ—Ç–∞ {report_id} –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ: {e2}")
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data.pop('report_state', None)
        context.user_data.pop('current_report_id', None)
        context.user_data.pop('report_text', None)
        context.user_data.pop('photo_count', None)
        context.user_data.pop('saved_photos', None)
        return
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await update.message.reply_text(f"‚úÖ –í–∞—à –æ—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏. ID –≤–∞—à–µ–≥–æ –æ—Ç—á–µ—Ç–∞: {report_id}. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.")
    for admin_id in admin_ids:
        try:
            await context.bot.send_message(admin_id, f"üÜï –ù–æ–≤—ã–π –æ—Ç—á—ë—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {nick} (ID: {report_id}). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id} –æ –Ω–æ–≤–æ–º –æ—Ç—á–µ—Ç–µ {report_id}: {e}")
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.pop('report_state', None)
    context.user_data.pop('current_report_id', None)
    context.user_data.pop('report_text', None)
    context.user_data.pop('photo_count', None)
    context.user_data.pop('saved_photos', None)

# –ö–æ–º–∞–Ω–¥–∞ /cancel ‚Äì –¥–æ—Å—Ä–æ—á–Ω–∞—è –æ—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞
async def cancel_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get('report_state'):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return
    report_id = context.user_data.get('current_report_id')
    if report_id and os.path.isdir(f"reports/{report_id}"):
        try:
            shutil.rmtree(f"reports/{report_id}")
            logging.info(f"–û—Ç—á–µ—Ç {report_id} –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–∞ {report_id} –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ: {e}")
    context.user_data.pop('report_state', None)
    context.user_data.pop('current_report_id', None)
    context.user_data.pop('report_text', None)
    context.user_data.pop('photo_count', None)
    context.user_data.pop('saved_photos', None)
    await update.message.reply_text("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
    await menu(update, context)
    
# =============================================
# –°–ò–°–¢–ï–ú–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò
# =============================================
async def start_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    user_id = update.effective_user.id
    accounts = load_accounts()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –¥–∞–Ω–Ω—ã–º user_id
    if accounts.has_section(str(user_id)):
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return ConversationHandler.END

    await update.message.reply_text(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º:",
        reply_markup=get_back_keyboard()
    )
    return REG_NAME

async def reg_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∏–∫–Ω–µ–π–º–∞"""
    if update.message.text == "–ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–í–æ–π—Ç–∏" –∏ "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
        await update.message.reply_text(
            "–î–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=get_login_keyboard()
        )
        return ConversationHandler.END  # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    
    context.user_data['reg_data'] = {'nick': update.message.text}
    await update.message.reply_text(
        "üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è:",
        reply_markup=get_back_keyboard()
    )
    return REG_REALNAME

async def reg_realname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏"""
    if update.message.text == "–ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤–≤–æ–¥—É –Ω–∏–∫–Ω–µ–π–º–∞
        await update.message.reply_text(
            "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º:",
            reply_markup=get_back_keyboard()
        )
        return REG_NAME
    
    context.user_data['reg_data']['realname'] = update.message.text
    await update.message.reply_text(
        "üéÇ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):",
        reply_markup=get_back_keyboard()
    )
    return REG_BIRTHDATE

async def reg_birthdate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
    if update.message.text == "–ù–∞–∑–∞–¥":
        await update.message.reply_text(
            "üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è:",
            reply_markup=get_back_keyboard()
        )
        return REG_REALNAME
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
    try:
        datetime.strptime(update.message.text, "%d.%m.%Y")
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì",
            reply_markup=get_back_keyboard()
        )
        return REG_BIRTHDATE

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
    reg_data = context.user_data['reg_data']
    reg_id = str(uuid4())[:8]
    
    config = configparser.ConfigParser()
    config.read(REGISTRATIONS_FILE)
    
    config[reg_id] = {
        'user_id': str(update.effective_user.id),
        'nick': reg_data['nick'],
        'realname': reg_data['realname'],
        'birthdate': update.message.text,
        'status': 'pending',
        'timestamp': str(datetime.now())
    }
    
    with open(REGISTRATIONS_FILE, "w") as f:
        config.write(f)
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º 2+ —É—Ä–æ–≤–Ω—è
    await notify_admins_about_new_registration(reg_id, reg_data['nick'], context)
    
    await update.message.reply_text(
        "‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!",
        reply_markup=get_login_keyboard()
    )
    context.user_data.clear()
    return ConversationHandler.END

# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
async def view_registrations(update: Update, context: ContextTypes.DEFAULT_TYPE):
    config = configparser.ConfigParser()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
    if not os.path.exists(REGISTRATIONS_FILE):
        print(f"‚ùå –§–∞–π–ª {REGISTRATIONS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º update.callback_query.message.reply_text, –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç—Ç–æ callback_query
        if update.callback_query:
            await update.callback_query.message.reply_text("üì≠ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é (—Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç).")
        else:
            await update.message.reply_text("üì≠ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é (—Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç).")
        return

    config.read(REGISTRATIONS_FILE)  # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª

    # –û—Ç–ª–∞–¥–∫–∞: –í—ã–≤–æ–¥–∏–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏ —Ñ–∞–π–ª–∞
    print(f"üîç –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏: {config.sections()}")

    keyboard = []  # –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞—è–≤–æ–∫

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Å–µ–∫—Ü–∏—è–º —Ñ–∞–π–ª–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–æ–∫
    for section in config.sections():
        status = config[section].get('status', 'unknown')  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
        print(f"üìù –ó–∞—è–≤–∫–∞ ID {section}: —Å—Ç–∞—Ç—É—Å {status}")  # –û—Ç–ª–∞–¥–∫–∞

        # –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ "pending", –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –≤ —Å–ø–∏—Å–æ–∫
        if status == 'pending':
            keyboard.append([
                InlineKeyboardButton(f"{config[section]['nick']} ({section})", callback_data=f"reg_detail_{section}")
            ])

    # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ —Å –Ω—É–∂–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º, –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not keyboard:
        if update.callback_query:
            await update.callback_query.message.reply_text("üì≠ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
        else:
            await update.message.reply_text("üì≠ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–æ–∫
    if update.callback_query:
        await update.callback_query.message.edit_text(
            "üìù –ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await update.message.reply_text(
            "üìù –ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )


def load_admin_ids():
    config = load_accounts()  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    admin_ids = []
    for user_id, user_info in config.items():
        if int(user_info.get('is_admin', 0)) >= 2:
            admin_ids.append(user_id)
    return admin_ids

async def notify_admins_about_new_registration(reg_id: str, nick: str, context: ContextTypes.DEFAULT_TYPE):
    admin_ids = load_admin_ids()
    for admin_id in admin_ids:
        try:
            await context.bot.send_message(
                admin_id,
                f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:\nID: {reg_id}\n–ù–∏–∫: {nick}"
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")

                    
# –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏
async def reg_detail(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reg_id = update.callback_query.data.split("_")[2]
    config = configparser.ConfigParser()
    config.read(REGISTRATIONS_FILE)
    
    msg = f"""üìÑ –ó–∞—è–≤–∫–∞ {reg_id}
üë§ –ù–∏–∫: {config[reg_id]['nick']}
üìõ –ò–º—è: {config[reg_id]['realname']}
üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {config[reg_id]['birthdate']}"""
    
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"reg_approve_{reg_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reg_reject_{reg_id}")
        ]
    ]
    
    await update.callback_query.message.edit_text(msg, reply_markup=InlineKeyboardMarkup(keyboard))

# –û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
# –û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
async def reg_approve(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reg_id = update.callback_query.data.split("_")[2]
    
    # –ß—Ç–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    config = configparser.ConfigParser()
    try:
        config.read(REGISTRATIONS_FILE, encoding="utf-8")
    except UnicodeDecodeError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ REGISTRATIONS_FILE: {e}")
        await update.callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏.")
        return
    
    # –ü–µ—Ä–µ–Ω–æ—Å –≤ –∞–∫–∫–∞—É–Ω—Ç—ã
    accounts = configparser.ConfigParser()
    try:
        accounts.read(ACCOUNTS_FILE, encoding="utf-8")
    except UnicodeDecodeError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ACCOUNTS_FILE: {e}")
        await update.callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö
    if reg_id not in config.sections():
        await update.callback_query.message.edit_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    user_id = config[reg_id]['user_id']
    
    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ rank –∏ daily_rate —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    rank = -1  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑—Ä—è–¥ –∫–∞–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    daily_rate = get_daily_rate(rank)  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–≤–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑—Ä—è–¥–∞
    
    accounts[user_id] = {
    'nick': config[reg_id]['nick'],
    'position': config[reg_id].get('position', '-'),
    'rank': rank,
    'daily_rate': daily_rate,
    'warnings': config[reg_id].get('warnings', '0'),
    'predicted_payment': config[reg_id].get('predicted_payment', '0'),
    'personal_account': config[reg_id].get('personal_account', '0'),
    'rating': config[reg_id].get('rating', '0'),
    'is_admin': '-1',  # –°—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    'realname': config[reg_id].get('realname', ''),
    'daterod': config[reg_id].get('birthdate', ''),  # –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
    'ball': '0'  # —Å—É–º–º–∞ –±–∞–ª–ª–æ–≤
    }
    
    # –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ ACCOUNTS_FILE
    try:
        with open(ACCOUNTS_FILE, "w", encoding="utf-8") as f:
            accounts.write(f)
    except UnicodeEncodeError as e:
        print(f"–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª ACCOUNTS_FILE: {e}")
        await update.callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª.")
        return
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await context.bot.send_message(
            user_id, 
            "‚úÖ –í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–¥–æ–±—Ä–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É."
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        await update.callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        return
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
    try:
        config.remove_section(reg_id)
    except KeyError:
        print(f"–ó–∞—è–≤–∫–∞ —Å ID {reg_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
    
    # –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ REGISTRATIONS_FILE
    try:
        with open(REGISTRATIONS_FILE, "w", encoding="utf-8") as f:
            config.write(f)
    except UnicodeEncodeError as e:
        print(f"–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª REGISTRATIONS_FILE: {e}")
        await update.callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∑–∞—è–≤–æ–∫.")
        return
    
    await update.callback_query.message.edit_text("‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!")


# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async def reg_reject(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"""
    query = update.callback_query
    await query.answer()
    reg_id = query.data.split('_')[-1]
    
    config = configparser.ConfigParser()
    config.read(REGISTRATIONS_FILE)
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
    user_id = config[reg_id]['user_id']
    config.remove_section(reg_id)
    
    with open(REGISTRATIONS_FILE, "w") as f:
        config.write(f)
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await context.bot.send_message(
        user_id,
        "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    )
    await query.edit_message_text(f"‚ùå –ó–∞—è–≤–∫–∞ #{reg_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")

# –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–¢–ú–ï–ù–´ –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò
async def cancel_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    await update.message.reply_text(
        "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=get_login_keyboard()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –≤—Ö–æ–¥–∞
    )
    context.user_data.clear()  # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    return ConversationHandler.END

conv_reg = ConversationHandler(
    entry_points=[MessageHandler(filters.Text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"), start_registration)],
    states={
        REG_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, reg_name)],
        REG_REALNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, reg_realname)],
        REG_BIRTHDATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, reg_birthdate)],
        ConversationHandler.TIMEOUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, unknown_input)]
    },
    fallbacks=[CommandHandler("cancel", cancel_registration)]
)

# =============================================
# –†–ê–ó–†–Ø–î–ù–ê–Ø –°–ò–°–¢–ï–ú–ê
# =============================================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"
async def manage_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    config = load_accounts()
    users = [(user_id, config[user_id].get('nick', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')) for user_id in config.sections() if user_id.isdigit()]
    if not users:
        await query.message.edit_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        return
    keyboard = [[InlineKeyboardButton(nick, callback_data=f"edit_user_{user_id}")] for user_id, nick in users]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=reply_markup)

async def edit_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.data.split("_")[2]
    context.user_data['user_id'] = user_id

    # –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    current_user_info = get_user_info(update.effective_user.id)
    admin_level = int(current_user_info.get('is_admin', 0)) if current_user_info else 0

    if admin_level == 1:
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"statistics_{user_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="manage_users")]
        ]
    elif admin_level == 2:
        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è –ù–∏–∫–Ω–µ–π–º", callback_data="change_nick")],
            [InlineKeyboardButton("‚ö†‚ûïÔ∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", callback_data="add_warning")],
            [InlineKeyboardButton("‚ö†‚ûñ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", callback_data="remove_warning")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"statistics_{user_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="manage_users")]
        ]
    elif admin_level == 3:
        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è –ù–∏–∫–Ω–µ–π–º", callback_data="change_nick")],
            [InlineKeyboardButton("üìå –î–æ–ª–∂–Ω–æ—Å—Ç—å", callback_data=f"change_position_{user_id}")],
            [InlineKeyboardButton("‚≠ê –†–∞–∑—Ä—è–¥", callback_data=f"select_user_{user_id}")],
            [InlineKeyboardButton("‚ö†‚ûïÔ∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", callback_data="add_warning")],
            [InlineKeyboardButton("‚ö†‚ûñ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", callback_data="remove_warning")],
            [InlineKeyboardButton("‚ú¥ –ë–∞–ª–ª—ã", callback_data="change_ball")],
            [InlineKeyboardButton("üí≥ –õ–∏—á–Ω—ã–π —Å—á—ë—Ç", callback_data="change_personal_account")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"statistics_{user_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="manage_users")]
        ]
    else:
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="manage_users")]
        ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:", reply_markup=reply_markup)
    
 
async def change_nick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = context.user_data.get('user_id')
    context.user_data['handle_change_nick'] = True
    await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")

async def change_position(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ context.user_data, –æ–Ω –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ edit_user
    user_id = context.user_data.get('user_id')
    if not user_id:
        await query.message.edit_text("–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.")
        return
    keyboard = [
        [InlineKeyboardButton("–ü–û–ß –ó–ê–ú", callback_data="set_position_–ø–æ—á–µ—Ç–Ω—ã–π_–∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å")],
        [InlineKeyboardButton("–ó–ê–ú", callback_data="set_position_–∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å")],
        [InlineKeyboardButton("–°–¢–ê–†–®–ò–ô –ó–ê–ú", callback_data="set_position_—Å—Ç–∞—Ä—à–∏–π_–∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"edit_user_{user_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=reply_markup)

async def set_position(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á –ø–æ–∑–∏—Ü–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä "–ø–æ—á–µ—Ç–Ω—ã–π_–∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å" –∏–∑ "set_position_–ø–æ—á–µ—Ç–Ω—ã–π_–∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å"
    pos_key = query.data.replace("set_position_", "")
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á 'user_id' –∏–∑ context.user_data, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –≤ edit_user
    user_id = context.user_data.get('user_id')
    if not user_id:
        await query.message.edit_text("–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.")
        return
    # –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ –∏ —É—Ä–æ–≤–Ω—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
    position_mapping = {
        "–ø–æ—á–µ—Ç–Ω—ã–π_–∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å": ("–ü–æ—á—ë—Ç–Ω—ã–π –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å", "1"),
        "–∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å": ("–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å", "0"),
        "—Å—Ç–∞—Ä—à–∏–π_–∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å": ("–°—Ç–∞—Ä—à–∏–π –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å", "2")
    }
    if pos_key in position_mapping:
        position, is_admin = position_mapping[pos_key]
        config = load_accounts()
        if config.has_section(user_id):
            config[user_id]['position'] = position
            config[user_id]['is_admin'] = is_admin
            save_accounts(config)
            await query.message.edit_text(f"–î–æ–ª–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {position}")
        else:
            await query.message.edit_text("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        await query.message.edit_text("–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å.")


async def add_warning(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = context.user_data.get('user_id')
    config = load_accounts()
    if config.has_section(user_id):
        warnings = int(config[user_id].get('warnings', '0')) + 1
        config[user_id]['warnings'] = str(warnings)
        save_accounts(config)
        await query.message.edit_text(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warnings}.",
                                      reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"edit_user_{user_id}")]]))
        user_info = get_user_info(user_id)
        await context.bot.send_message(user_id, f"‚ö†Ô∏è –í–∞–º –≤—ã–¥–∞–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å {warnings} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π.")
        await context.bot.send_message(admin_ids[0], f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_info['nick']} –≤—ã–¥–∞–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ. –¢–µ–ø–µ—Ä—å —É –Ω–µ–≥–æ {warnings} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π.")
    else:
        await query.message.edit_text("–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                                      reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"edit_user_{user_id}")]]))

async def remove_warning(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = context.user_data.get('user_id')
    config = load_accounts()
    if config.has_section(user_id):
        warnings = max(0, int(config[user_id].get('warnings', '0')) - 1)
        config[user_id]['warnings'] = str(warnings)
        save_accounts(config)
        await query.message.edit_text(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å–Ω—è—Ç–æ. –¢–µ–ø–µ—Ä—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warnings}.",
                                      reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"edit_user_{user_id}")]]))
        user_info = get_user_info(user_id)
        await context.bot.send_message(user_id, f"‚úÖ –° –≤–∞—Å —Å–Ω—è—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å {warnings} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π.")
        await context.bot.send_message(admin_ids[0], f"‚úÖ –° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_info['nick']} —Å–Ω—è—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ. –¢–µ–ø–µ—Ä—å —É –Ω–µ–≥–æ {warnings} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π.")
    else:
        await query.message.edit_text("–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                                      reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"edit_user_{user_id}")]]))

        
async def change_ball(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = context.user_data.get('user_id')
    context.user_data['handle_change_ball'] = True
    await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤:")

async def change_personal_account(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = context.user_data.get('user_id')
    context.user_data['handle_change_personal_account'] = True
    await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ —Å—á–µ—Ç–∞:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑—Ä—è–¥–∞
async def select_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.data.split("_")[2]
    context.user_data['selected_user_id'] = user_id
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–∑—Ä—è–¥–∞ –æ—Ç -1 –¥–æ 10
    keyboard = [
        [InlineKeyboardButton(str(rank), callback_data=f"set_rank_{rank}") for rank in range(-1, 4)],
        [InlineKeyboardButton(str(rank), callback_data=f"set_rank_{rank}") for rank in range(4, 8)],
        [InlineKeyboardButton(str(rank), callback_data=f"set_rank_{rank}") for rank in range(8, 11)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞–∑—Ä—è–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=reply_markup)

async def statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = context.user_data.get('user_id')
    user_info = get_user_info(user_id)
    if user_info:
        predicted_payment_formatted = locale.format_string("%d", user_info['predicted_payment'], grouping=True).replace('¬†', '.')
        daily_rate_formatted = locale.format_string("%d", user_info['daily_rate'], grouping=True).replace('¬†', '.')
        personal_account_formatted = locale.format_string("%d", int(user_info['personal_account']), grouping=True).replace('¬†', '.')
        message = (
            f"üìå –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç (ID: {user_id})\n\n"
            f"üë§ –ù–∏–∫–Ω–µ–π–º: {user_info['nick']}\n"
            f"üîÆ –†–µ–∞–ª—å–Ω–æ–µ –∏–º—è: {user_info['realname']}\n"
            f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user_info['daterod']}\n"
            f"üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: {user_info['position']}\n"
            f"‚≠ê –†–∞–∑—Ä—è–¥: {user_info['rank']}\n"
            f"üí∞ –°—Ç–∞–≤–∫–∞ –≤ –¥–µ–Ω—å: {daily_rate_formatted} RUB\n"
            f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {user_info['warnings']}\n"
            f"‚ú¥Ô∏è –ë–∞–ª–ª—ã: {user_info['ball']}\n"
            f"üí∏ –ó–∞—Ä–ø–ª–∞—Ç–∞: {predicted_payment_formatted} RUB\n"
            f"üí≥ –õ–∏—á–Ω—ã–π —Å—á–µ—Ç: {personal_account_formatted} RUB" 
        )
        await query.message.edit_text(message, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"edit_user_{user_id}")]]))
    else:
        await query.message.edit_text("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"edit_user_{user_id}")]]))
        

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Ä–∞–∑—Ä—è–¥–∞
async def set_rank(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    rank = int(query.data.split("_")[2])
    user_id = context.user_data.get('selected_user_id')
    
    user_info = get_user_info(user_id)
    if not user_info:
        await query.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    config = load_accounts()
    if not config.has_section(user_id):
        await query.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    config[user_id]['rank'] = str(rank)
    config[user_id]['daily_rate'] = str(get_daily_rate(rank))

    with open(ACCOUNTS_FILE, "w", encoding="utf-8") as f:
        config.write(f)

    await query.message.reply_text(f"–†–∞–∑—Ä—è–¥ {rank} –∏ —Å—Ç–∞–≤–∫–∞ {get_daily_rate(rank)} —Ä—É–±–ª–µ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}.")
    await context.bot.send_message(chat_id=int(user_id), text=f"‚úÖ –í–∞–º –ø—Ä–∏—Å–≤–æ–µ–Ω –Ω–æ–≤—ã–π —Ä–∞–∑—Ä—è–¥: {rank}. –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ —Ç–µ–ø–µ—Ä—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {get_daily_rate(rank)} —Ä—É–±–ª–µ–π.")
    
    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    context.user_data.pop('selected_user_id', None)

# –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ –ø—Ä–∞–≤
def get_limited_keyboard():
    keyboard = [[KeyboardButton("–î–ª—è –≤—ã–¥–∞—á–∏ –ø—Ä–∞–≤ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞.")]]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

async def fetch_updates():
    try:
        async with httpx.AsyncClient(timeout=20.0) as client:
            response = await client.post("https://api.telegram.org/bot{token}/getUpdates")
            response.raise_for_status()
            return response.json()
    except httpx.RequestError as exc:
        logging.error(f"An error occurred while requesting {exc.request.url!r}.")
    except httpx.HTTPStatusError as exc:
        logging.error(f"Error response {exc.response.status_code} while requesting {exc.request.url!r}.")
    except httpx.TimeoutException as exc:
        logging.error("Request timed out.")

async def handle_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –í–∞—à –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã
        logging.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã: –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤")
        # –ü—Ä–∏–º–µ—Ä –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å —Ç–∞–π–º–∞—É—Ç
        await long_running_operation()
        
    except TimeoutError:
        logging.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–Ω—é: Timed out")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def long_running_operation():
    # –ü—Ä–∏–º–µ—Ä –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å —Ç–∞–π–º–∞—É—Ç
    await asyncio.sleep(25)  # –î–ª–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è

# –§—É–Ω–∫—Ü–∏—è main ‚Äì –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    application = Application.builder().token(TOKEN).build()
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("menu", menu))
    application.add_handler(conv_reg)
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    application.add_handler(CallbackQueryHandler(view_registrations, pattern="^view_registrations$"))
    application.add_handler(CallbackQueryHandler(reg_detail, pattern="^reg_detail_.*"))
    application.add_handler(CallbackQueryHandler(reg_approve, pattern="^reg_approve_.*"))
    application.add_handler(CallbackQueryHandler(reg_reject, pattern="^reg_reject_.*"))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤ (–∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥)
    application.add_handler(CallbackQueryHandler(handle_withdrawal_selection, pattern=r'^withdraw_\d+$'))
    application.add_handler(CallbackQueryHandler(confirm_withdraw_request, pattern=r"^confirm_withdraw$"))
    application.add_handler(CallbackQueryHandler(cancel_withdraw_request, pattern=r"^cancel_withdraw$"))
    application.add_handler(CallbackQueryHandler(approve_withdrawal, pattern=r"^approve_\w+$"))
    application.add_handler(CallbackQueryHandler(reject_withdrawal, pattern=r"^reject_[a-zA-Z0-9]+$", block=False))
    application.add_handler(CallbackQueryHandler(view_withdrawal, pattern=r"^view_"))
    application.add_handler(CallbackQueryHandler(admin_withdrawals, pattern="^admin_withdrawals$"))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤ (—Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –¥—Ä. —Ñ—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
    application.add_handler(CallbackQueryHandler(mass_message, pattern='^mass_message$'))
    application.add_handler(CallbackQueryHandler(cancel_mass_message, pattern='^cancel_mass_message$'))
    application.add_handler(CallbackQueryHandler(single_message, pattern="^start_single_message$"))
    application.add_handler(CallbackQueryHandler(send_single_message, pattern="^single_user_"))
    application.add_handler(CallbackQueryHandler(cancel_single_message, pattern="^cancel_single_message$"))
    #NEW
    application.add_handler(CallbackQueryHandler(manage_users, pattern="^manage_users$"))
    application.add_handler(CallbackQueryHandler(edit_user, pattern="^edit_user_.*"))
    application.add_handler(CallbackQueryHandler(change_nick, pattern="^change_nick$"))
    application.add_handler(CallbackQueryHandler(add_warning, pattern="^add_warning$"))
    application.add_handler(CallbackQueryHandler(remove_warning, pattern="^remove_warning$"))
    application.add_handler(CallbackQueryHandler(change_ball, pattern="^change_ball$"))
    application.add_handler(CallbackQueryHandler(change_personal_account, pattern="^change_personal_account$"))
    application.add_handler(CallbackQueryHandler(select_user, pattern="^select_user_"))
    application.add_handler(CallbackQueryHandler(set_position, pattern="^set_position_"))
    application.add_handler(CallbackQueryHandler(change_position, pattern="^change_position_"))
    application.add_handler(CallbackQueryHandler(set_position, pattern="^set_position_"))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã –æ—Ç—á–µ—Ç–æ–≤
    application.add_handler(CallbackQueryHandler(admin_reports, pattern="^reports$"))
    application.add_handler(CallbackQueryHandler(view_report, pattern="^viewReport_"))
    application.add_handler(CallbackQueryHandler(approve_report, pattern="^approveReport_"))
    application.add_handler(CallbackQueryHandler(reject_report, pattern="^rejectReport_"))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(manage_users, pattern="^manage_users$"))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"), button_handler))
    application.add_handler(CallbackQueryHandler(manage_users, pattern="^manage_users$"))
    application.add_handler(CallbackQueryHandler(select_user, pattern="^select_user_.*"))
    application.add_handler(CallbackQueryHandler(set_rank, pattern="^set_rank_.*"))  
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(CommandHandler("done", finish_report))
    application.add_handler(CommandHandler("cancel", cancel_report))
    application.add_handler(CommandHandler("rating", rating))
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    application.add_handler(CallbackQueryHandler(statistics, pattern="^statistics_.*"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
    # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –±–∞–ª–ª–æ–≤
    logging.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    await application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
